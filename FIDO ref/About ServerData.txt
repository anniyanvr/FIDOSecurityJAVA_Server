serverData:
1) of type DOMString
2) A session identifier created by the relying party.
3) The relying party can opaquely store things like expiration times for the registration session, protocol version used and other useful information in serverData. This data is opaque to FIDO UAF Clients. 
4) FIDO Servers may reject a response that is lacking this data or is containing unauthorized modifications to it.
5) Servers that depend on the integrity of serverData should apply appropriate security measures, as described in Registration Request Generation Rules for FIDO Server and section ServerData and KeyHandle.


As described in Registration Request Generation Rules for FIDO Server:
Create a RegistrationRequest object r with appropriate r.header for each supported version, and
- FIDO Servers should not assume any implicit integrity protection of r.header.serverData. FIDO Servers that depend on the integrity of r.header.serverData should apply and verify a cryptographically secure Message Authentication Code (MAC) to serverData and they should also cryptographically bind serverData to the related message, e.g. by reincluding r.challenge, see also section ServerData and KeyHandle.
- All other FIDO components (except the FIDO server) will treat r.header.serverData as an opaque value. As a consequence the FIDO server can implement any suitable cryptographic protection method.


As described in section ServerData and KeyHandle:
- The FIDO Server should not assume any kind of implicit integrity protection of such data nor any implicit session binding. The FIDO Server must explicitly bind the serverData to an active session.
- In some situations, it is desirable to protect sensitive data such that it can be stored in arbitrary places (e.g. in serverData or in the KeyHandle). In such situations, the confidentiality and integrity of such sensitive data must be protected. This can be achieved by using a suitable encryption algorithm, e.g. AES with a suitable cipher mode, e.g. CBC or CTR [CTRMode]. This cipher mode needs to be used correctly. For CBC, for example, a fresh random IV for each encryption is required. The data might have to be padded first in order to obtain an integral number of blocks in length. The integrity protection can be achieved by adding a MAC or a digital signature on the ciphertext, using a different key than for the encryption, e.g. using HMAC [FIPS198-1]. Alternatively, an authenticated encryption scheme such as AESGCM [SP800-38D] or AES-CCM [SP800-38C] could be used. Such a scheme provides both integrity and confidentiality in a ??single algorithm and using a single key.
- When protecting serverData, the MAC or digital signature computation should include some data that binds the data to its associated message, for example by re-including the challenge value in the authenticated serverData.




SUMMARY:
on protocol doc it says this:
1) server data can include info like expiration times for the registration session, protocol version used and other useful information in serverData. This data is opaque to FIDO UAF Clients.
2) FIDO Servers may reject a response that is lacking this data or is containing unauthorized modifications to it.
3) FIDO servers that depend on this serverdata integrity however, should apply appropriate security measures(cryptographic protection methods) on this info that is sent.
4) any suitable encryption algorithm can be used for above security purpose
5) one important note though says, When protecting serverData, the MAC or digital signature computation (i.e. any method we use to protect data) should include some data that binds(maps) the data to its associated message, for example by re-including the challenge (the random salt value that we generate) value in the authenticated serverData.
